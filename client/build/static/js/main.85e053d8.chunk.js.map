{"version":3,"sources":["utils/auth.js","utils/queries.js","components/NavBar/NavBar.jsx","utils/mutations.js","components/Homepage/Homepage.jsx","pages/Login.jsx","pages/Signup.jsx","components/Comments/CommentList.jsx","pages/SingleTattoo.jsx","components/TattooSlide/TattooSlide.jsx","pages/Profile.jsx","App.js","reportWebVitals.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","GET_USER","gql","GET_ME_BASIC","GET_ME","GET_TATTOO","GET_TATTOOS","NavBar","username","useQuery","data","loading","me","Navbar","className","bg","variant","expand","Container","Brand","id","href","Toggle","Collapse","Nav","Link","InputGroup","FormControl","placeholder","Button","Auth","loggedIn","onClick","logout","ADD_USER","LOGIN","LIKE_TATTOO","UNLIKE_TATTOO","Homepage","useMutation","likeTattoo","unlikeTattoo","userData","userLoading","tattoos","likeToggle","tattooId","a","likedTattoos","find","variables","console","error","reload","Row","xs","sm","md","lg","map","tattoo","Col","Card","_id","Img","src","hostname","imageId","alt","Body","Title","title","type","size","Login","props","useState","email","password","formState","setFormState","login","handleFormSubmit","event","preventDefault","mutationResponse","log","handleChange","target","name","value","to","onSubmit","htmlFor","onChange","Signup","addUser","CommentList","comments","comment","commentBody","style","fontWeight","createdAt","SingleTattoo","useParams","Image","rounded","fluid","description","backgroundColor","height","width","commentCount","TattooSlide","Profile","user","bio","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85e053d8.chunk.js","sourcesContent":["import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();","import { gql } from '@apollo/client'\n\nexport const GET_USER = gql`\nquery user($username: String!) {\n    user(username: $username) {\n        _id\n        username\n        email\n        bio\n        likedTattoos\n        personalWork\n    }\n}\n`;\n\nexport const GET_ME_BASIC = gql`\nquery {\n    me {\n        _id\n        username\n        email\n        likedTattoos\n    }\n}\n`;\n\nexport const GET_ME = gql`\nquery {\n    me {\n        _id\n        username\n        email\n        bio\n        likedTattoos \n        personalWork \n    }\n}\n`;\n\nexport const GET_TATTOO = gql`\nquery tattoo($id: ID!) {\n    tattoo(_id: $id) {\n        _id\n        title\n        username\n        imageId\n        description\n        likes\n        commentCount\n        \n        comments {\n            _id\n            username\n            commentBody\n            createdAt\n        }\n    }\n}\n`;\n\nexport const GET_TATTOOS = gql`\nquery tattoos($_id: ID) {\n    tattoos(_id: $_id) {\n        _id\n        title\n        username\n        imageId\n        likes\n        createdAt\n    }\n}\n`;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./NavBar.css\";\nimport {\n  Container,\n  Row,\n  Col,\n  Nav,\n  Navbar,\n  InputGroup,\n  FormControl,\n  Button\n} from \"react-bootstrap\";\n\nimport Auth from \"../../utils/auth\";\n\nimport { useQuery } from \"@apollo/client\";\nimport { GET_ME } from \"../../utils/queries\";\n\nfunction showNavigation(username) {\n  if (Auth.loggedIn()) {\n    return (\n      <>\n      <Button className=' neon-pink-btn mx-1' href={`/profile/${username}`}>View Profile</Button>\n      <Button className=' neon-pink-btn mx-1' href='/' onClick={() => Auth.logout()}>Logout</Button>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <Button className='neon-pink-btn mx-1' href=\"/signup\">Signup</Button>\n        <Button className='neon-pink-btn mx-1' href=\"/login\">Login</Button>\n      </>\n\n    );\n  }\n}\n\n\n\nexport const NavBar = () => {\n\n  const { loading, data } = useQuery(GET_ME);\n  \n  const me = data ? data.me : \"\";\n  \n\n  return (\n    <>\n      <Navbar className=\"p-4\" bg=\"dark\" variant=\"dark\" expand='lg'>\n        <Container>\n\n          <Navbar.Brand id=\"NavTitle\" href=\"/\">\n            #SkinDeep\n          </Navbar.Brand>\n\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\" className=\"justify-content-end\">\n\n            <Nav className=\"mr-auto\">\n              <Nav.Link href=\"/\">Home</Nav.Link>\n              {/* <Nav.Link href=\"#features\">Features</Nav.Link> */}\n              {/* <Nav.Link href=\"#pricing\">Pricing</Nav.Link> */}\n              <InputGroup className=\"mb-3\">\n                <FormControl\n                  placeholder=\"Search\"\n                  aria-label=\"Search\"\n                  aria-describedby=\"basic-addon2\"\n                />\n                <Button className='neon-pink-btn me-1' id=\"button-addon2\">\n                  Search\n                </Button>\n                {showNavigation(me.username)}\n              </InputGroup>\n            </Nav>\n          </Navbar.Collapse>\n\n        </Container>\n      </Navbar>\n    </>\n  );\n};\n\nexport default NavBar;\n","import { gql } from '@apollo/client';\n\nexport const ADD_USER = gql`\nmutation addUser($username: String!, $password: String!, $email: String!) {\n    addUser(username: $username, password: $password, email: $email ) {\n        token\n        user {\n            _id\n            username\n            email\n          \n        }\n    }\n}\n`;\n\nexport const LOGIN = gql`\nmutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n        token\n        user {\n            _id\n            username\n        }\n    }\n}\n`;\n\nexport const ADD_TATTOO = gql`\nmutation addTattoo($title: String!, $image: String!, $description: String) {\n    addTattoo(title: $title, image: $image, description: $description) {\n        _id\n        title\n        username\n        image\n        description\n        likes\n    }\n}\n`;\n\nexport const LIKE_TATTOO = gql`\nmutation likeTattoo($tattooId: ID!) {\n    likeTattoo(tattooId: $tattooId) {\n        _id\n        likes\n    }\n}\n`;\n\nexport const UNLIKE_TATTOO = gql`\nmutation unlikeTattoo($tattooId: ID!) {\n    unlikeTattoo(tattooId: $tattooId) {\n        _id\n        likes\n    }\n}\n`;\n\nexport const ADD_COMMENT = gql`\nmutation addComment($tattooId: ID!, $commentBody: String!) {\n    addComment(tattooId: $tattooId, commentBody: $commentBody) {\n        _id\n        title\n        username\n        image\n        description\n        likes\n        comments {\n            _id\n            username\n            commentBody\n        }\n    }\n}\n`;\n\nexport const REMOVE_TATTOO = gql`\nmutation removeTattoo($tattooId: ID!){\n    removeTattoo(tattooId: $tattooId) {\n        _id\n        username\n        email\n        bio\n        likedTattoos{\n            _id\n            title\n            username\n            image\n            likes\n        }\n        personalWork{\n            _id\n            title\n            username\n            image\n            likes\n        }\n    }\n}\n`;","import React from \"react\";\nimport { Link } from 'react-router-dom';\nimport { Col, Container, Row, Button, Card } from \"react-bootstrap\";\n\nimport Auth from '../../utils/auth'\n\nimport './Homepage.css'\n// import images from \"../../images\";\n\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GET_TATTOOS, GET_ME_BASIC } from \"../../utils/queries\";\nimport { LIKE_TATTOO, UNLIKE_TATTOO } from '../../utils/mutations';\n\nexport const Homepage = () => {\n  const [likeTattoo] = useMutation(LIKE_TATTOO);\n  const [unlikeTattoo] = useMutation(UNLIKE_TATTOO);\n\n  const { data, loading } = useQuery(GET_TATTOOS);\n  const { data: userData, loading: userLoading } = useQuery(GET_ME_BASIC);\n\n  const tattoos = data ? data.tattoos : [];\n\n  if (loading || userLoading) {\n    return <div>Loading...</div>\n  }\n\n  const likeToggle = async (tattooId) => {\n    if (userData.me.likedTattoos.find(id => id === tattooId)) {\n      try {\n        const res = await unlikeTattoo({ variables: { tattooId } })\n      } catch (err) {\n        console.error('Failed to unlike tattoo', err)\n      }\n    } else {\n      try {\n        const res = await likeTattoo({ variables: { tattooId } })\n      } catch (err) {\n        console.error('Failed to unlike tattoo', err)\n      }\n    }\n    window.location.reload();\n  }\n\n  return (\n    <Container className='my-5'>\n      <Row xs={1} sm={2} md={3} lg={4} className=\"g-4\">\n        {tattoos.map((tattoo) => (\n          <Col className='d-flex justify-content-center'>\n            <Card className='p-2'>\n              <a href={`/tattoo/${tattoo._id}`}>\n\n                {(!process.env.NODE_ENV || process.env.NODE_ENV === 'development') ? (\n                  // dev code\n                  <Card.Img variant=\"top\" src={`http://localhost:3001/api/image/${tattoo.imageId}`} alt='tattoo' />\n                ) : (\n                  // production code\n                  <Card.Img variant=\"top\" src={`${window.location.hostname}/api/image/${tattoo.imageId}`} alt='tattoo' />\n                )}\n              </a>\n\n              <Card.Body>\n                <Card.Title>\n                  {tattoo.title}\n                </Card.Title>\n                <Row>\n\n                  <p>\n                    by <a className='link' href={`/profile/${tattoo.username}`}>{tattoo.username}</a>\n                  </p>\n\n                  {Auth.loggedIn() && userData ? (\n                    userData.me.likedTattoos.find(id => id === tattoo._id) ? (\n                      <Button type='button' className='neon-green-btn' size='sm' onClick={() => likeToggle(tattoo._id)}>\n                        Unlike\n                      </Button>\n\n                    ) : (\n\n                      <Button type='button' className='neon-pink-btn' size='sm' onClick={() => likeToggle(tattoo._id)}>\n                        Like\n                      </Button>\n                    )\n                  ) : (<></>)}\n                </Row>\n              </Card.Body>\n            </Card>\n          </Col>\n        ))}\n      </Row>\n    </Container>\n  );\n};\n\nexport default Homepage;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\nexport default Login;","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ username:'', email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        username: formState.username,\n        email: formState.email,\n        password: formState.password,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"username\"> Username:</label>\n          <input\n            placeholder=\"Username\"\n            name=\"username\"\n            type=\"username\"\n            id=\"firstname\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;","import './CommentList.css'\nimport { Link } from 'react-router-dom';\n\nconst CommentList = ({ comments }) => {\n    return (\n        <div>\n            {comments &&\n                comments.map(comment => (\n                    <div className='comment-card my-3 p-3'>\n                        <p className=\"pill mb-3 \" key={comment._id}>\n                            {comment.commentBody} {'// '}\n                        </p>\n                        <p className='mb-0 text-end'>\n                            <Link className='link' to={`/profile/${comment.username}`} style={{ fontWeight: 700 }}>\n                                {comment.username} \n                            </Link> on {comment.createdAt}\n                        </p>\n                    </div>\n                ))}\n        </div>\n    )\n}\n\nexport default CommentList;","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { GET_ME_BASIC, GET_TATTOO } from '../utils/queries';\n\nimport CommentList from '../components/Comments/CommentList.jsx'\n\nimport Auth from '../utils/auth'\nimport { Col, Container, Row, Button, Image } from \"react-bootstrap\";\nimport { Link } from 'react-router-dom';\nimport { LIKE_TATTOO, UNLIKE_TATTOO } from '../utils/mutations';\n\n\nconst SingleTattoo = () => {\n    const [likeTattoo] = useMutation(LIKE_TATTOO);\n    const [unlikeTattoo] = useMutation(UNLIKE_TATTOO);\n\n    const { id: tattooId } = useParams();\n\n    const { data: userData, loading: userLoading } = useQuery(GET_ME_BASIC);\n\n    const { loading, data } = useQuery(GET_TATTOO, {\n        variables: { id: tattooId }\n    });\n\n    const tattoo = data ? data.tattoo : {};\n\n    if (loading || userLoading) {\n        return <div>Loading...</div>\n    }\n\n    const likeToggle = async () => {\n        if (userData.me.likedTattoos.find(id => id === tattooId)) {\n            try {\n                const res = await unlikeTattoo({ variables: { tattooId } })\n            } catch (err) {\n                console.error('Failed to unlike tattoo', err)\n            }\n        } else {\n            try {\n                const res = await likeTattoo({ variables: { tattooId } })\n            } catch (err) {\n                console.error('Failed to unlike tattoo', err)\n            }\n        }\n        window.location.reload();\n    }\n    return (\n        <Container className='my-3'>\n            <h2 className='my-3'>{tattoo.title}</h2>\n\n            <Row>\n                <Col xs='12' lg='6' className='text-center mb-4'>\n                    {(!process.env.NODE_ENV || process.env.NODE_ENV === 'development') ? (\n                        // dev code\n                        <Image src={`http://localhost:3001/api/image/${tattoo.imageId}`} alt='tattoo' rounded fluid></Image>\n\n                    ) : (\n                        // production code\n                        <Image src={`${window.location.hostname}/api/image/${tattoo.imageId}`} alt='tattoo' rounded fluid></Image>\n                    )}\n                </Col>\n\n                <Col>\n                    <Row>\n\n                        <Col xs='6'>\n                            <p>{tattoo.description}</p>\n                        </Col>\n\n                        <Col xs='6' className='text-center'>\n\n                            <Row className='d-flex justify-content-center'>\n\n                                <div className='rounded-circle d-flex justify-content-center align-items-center' style={{ backgroundColor: \"gray\", height: '7rem', width: '7rem' }}>\n                                    <p>\n                                        User Image\n                                    </p>\n                                </div>\n                            </Row>\n\n                            <Row>\n                                <Link to={`/profile/${tattoo.username}`} className='link mt-2'>\n                                    {tattoo.username}\n                                </Link>\n                            </Row>\n\n                            <Row>\n                                {Auth.loggedIn() && userData ? (\n                                    <div className='my-3'>\n                                        <Button type='button' className='neon-pink-btn mx-2' size='sm'>Comment</Button>\n                                        {userData.me.likedTattoos.find(id => id === tattoo._id) ? (\n                                            <Button type='button' className='neon-green-btn' size='sm' onClick={() => likeToggle()}>\n                                                Unlike\n                                            </Button>\n\n                                        ) : (\n\n                                            <Button type='button' className='neon-pink-btn' size='sm' onClick={() => likeToggle()}>\n                                                Like\n                                            </Button>\n                                        )}\n                                    </div>\n                                ) : (<></>)}\n                            </Row>\n\n                        </Col>\n                    </Row>\n\n                    {tattoo.commentCount ? (\n                        <div className='mt-1'>\n                            <h3>Comments</h3>\n                            {tattoo.commentCount > 0 && <CommentList comments={tattoo.comments} />}\n                        </div>\n                    ) : (\n                        <div className='mt-3'>\n                            <h3>No Comments</h3>\n                        </div>\n                    )}\n                </Col>\n            </Row>\n        </Container>\n\n    )\n}\n\nexport default SingleTattoo;","import { useQuery } from \"@apollo/client\";\nimport { GET_TATTOOS } from \"../../utils/queries\";\n\nimport { Col, Card } from \"react-bootstrap\";\n\nconst TattooSlide = ({ tattooId }) => {\n\n    console.log(tattooId)\n    const { loading, data } = useQuery(GET_TATTOOS, {\n        variables: { _id: tattooId }\n    })\n\n    const tattoo = data ? data.tattoos : {};\n\n    if (loading) {\n        return <div>Loading...</div>\n    }\n\n\n    return (\n        <Col className='d-flex justify-content-center align-items-center'>\n            <Card key={tattooId}>\n\n                <a href={`/tattoo/${tattoo[0]._id}`}>\n\n                    {(!process.env.NODE_ENV || process.env.NODE_ENV === 'development') ? (\n                        // dev code\n                        <Card.Img className=\"d-block w-100\" src={`http://localhost:3001/api/image/${tattoo[0].imageId}`} alt='tattoo' />\n                    ) : (\n                        // production code\n                        <Card.Img className=\"d-block w-100\" src={`${window.location.hostname}/api/image/${tattoo[0].imageId}`} alt='tattoo' />\n                    )}\n                </a>\n\n            </Card>\n        </Col>\n    )\n}\n\nexport default TattooSlide;","import { useParams } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client'\nimport { GET_USER } from '../utils/queries';\n\nimport { Col, Container, Row } from 'react-bootstrap';\nimport TattooSlide from \"../components/TattooSlide/TattooSlide\";\n\nconst Profile = () => {\n    const { username } = useParams();\n\n    const { loading, data: userData } = useQuery(GET_USER, {\n        variables: { username }\n    })\n\n    const user = userData ? userData.user : {};\n\n    if (loading) {\n        return <div>Loading...</div>\n    }\n    console.log('user', user)\n\n    return (\n        <Container className='my-5'>\n            <Row>\n                <Col xs={2} className='text-center'>\n                    <div className='rounded-circle d-flex justify-content-center align-items-center mb-2' style={{ backgroundColor: \"gray\", height: '10rem', width: '10rem' }}>\n                        <p>\n                            User Image\n                        </p>\n                    </div>\n                    <p>{user.username}</p>\n                </Col>\n                {user.bio ? (\n                    <Col>\n\n                        <h2>Bio</h2>\n                        <p>{user.bio}</p>\n                    </Col>\n\n                ) : (\n                    <></>\n                )}\n            </Row>\n            <h2 className='my-3'>Liked Tattoos</h2>\n            <Row xs={1} sm={2} md={3} lg={4} className=\"g-4\">\n\n                {user.likedTattoos.map(tattooId => {\n                    return <TattooSlide tattooId={tattooId}></TattooSlide>\n                })}\n            </Row>\n        </Container>\n    )\n}\n\nexport default Profile;","// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport NavBar from \"./components/NavBar/NavBar.jsx\";\nimport Homepage from \"./components/Homepage/Homepage\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport SingleTattoo from \"./pages/SingleTattoo\";\nimport Profile from \"./pages/Profile\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"id_token\");\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <NavBar />\n          <Switch>\n            <Route exact path=\"/\" component={Homepage} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/signup\" component={Signup} />\n            <Route exact path=\"/profile/:username\" component={Profile} />\n            <Route exact path=\"/tattoo/:id\" component={SingleTattoo} />\n          </Switch>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}